package com.peihou.waterpurifer.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.peihou.waterpurifer.pojo.TimerTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TIMER_TASK".
*/
public class TimerTaskDao extends AbstractDao<TimerTask, Long> {

    public static final String TABLENAME = "TIMER_TASK";

    /**
     * Properties of entity TimerTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MacAddress = new Property(1, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property BussMode = new Property(2, int.class, "bussMode", false, "BUSS_MODE");
        public final static Property FunCode = new Property(3, int.class, "funCode", false, "FUN_CODE");
        public final static Property Week = new Property(4, int.class, "week", false, "WEEK");
        public final static Property OpenHour = new Property(5, int.class, "openHour", false, "OPEN_HOUR");
        public final static Property OpenMin = new Property(6, int.class, "openMin", false, "OPEN_MIN");
        public final static Property CloseHour = new Property(7, int.class, "closeHour", false, "CLOSE_HOUR");
        public final static Property CloseMin = new Property(8, int.class, "closeMin", false, "CLOSE_MIN");
        public final static Property OpenHour2 = new Property(9, int.class, "openHour2", false, "OPEN_HOUR2");
        public final static Property OpenMin2 = new Property(10, int.class, "openMin2", false, "OPEN_MIN2");
        public final static Property CloseHour2 = new Property(11, int.class, "closeHour2", false, "CLOSE_HOUR2");
        public final static Property CloseMin2 = new Property(12, int.class, "closeMin2", false, "CLOSE_MIN2");
        public final static Property OpenHour3 = new Property(13, int.class, "openHour3", false, "OPEN_HOUR3");
        public final static Property OpenMin3 = new Property(14, int.class, "openMin3", false, "OPEN_MIN3");
        public final static Property CloseHour3 = new Property(15, int.class, "closeHour3", false, "CLOSE_HOUR3");
        public final static Property CloseMin3 = new Property(16, int.class, "closeMin3", false, "CLOSE_MIN3");
    }


    public TimerTaskDao(DaoConfig config) {
        super(config);
    }
    
    public TimerTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TIMER_TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MAC_ADDRESS\" TEXT," + // 1: macAddress
                "\"BUSS_MODE\" INTEGER NOT NULL ," + // 2: bussMode
                "\"FUN_CODE\" INTEGER NOT NULL ," + // 3: funCode
                "\"WEEK\" INTEGER NOT NULL ," + // 4: week
                "\"OPEN_HOUR\" INTEGER NOT NULL ," + // 5: openHour
                "\"OPEN_MIN\" INTEGER NOT NULL ," + // 6: openMin
                "\"CLOSE_HOUR\" INTEGER NOT NULL ," + // 7: closeHour
                "\"CLOSE_MIN\" INTEGER NOT NULL ," + // 8: closeMin
                "\"OPEN_HOUR2\" INTEGER NOT NULL ," + // 9: openHour2
                "\"OPEN_MIN2\" INTEGER NOT NULL ," + // 10: openMin2
                "\"CLOSE_HOUR2\" INTEGER NOT NULL ," + // 11: closeHour2
                "\"CLOSE_MIN2\" INTEGER NOT NULL ," + // 12: closeMin2
                "\"OPEN_HOUR3\" INTEGER NOT NULL ," + // 13: openHour3
                "\"OPEN_MIN3\" INTEGER NOT NULL ," + // 14: openMin3
                "\"CLOSE_HOUR3\" INTEGER NOT NULL ," + // 15: closeHour3
                "\"CLOSE_MIN3\" INTEGER NOT NULL );"); // 16: closeMin3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TIMER_TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TimerTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(2, macAddress);
        }
        stmt.bindLong(3, entity.getBussMode());
        stmt.bindLong(4, entity.getFunCode());
        stmt.bindLong(5, entity.getWeek());
        stmt.bindLong(6, entity.getOpenHour());
        stmt.bindLong(7, entity.getOpenMin());
        stmt.bindLong(8, entity.getCloseHour());
        stmt.bindLong(9, entity.getCloseMin());
        stmt.bindLong(10, entity.getOpenHour2());
        stmt.bindLong(11, entity.getOpenMin2());
        stmt.bindLong(12, entity.getCloseHour2());
        stmt.bindLong(13, entity.getCloseMin2());
        stmt.bindLong(14, entity.getOpenHour3());
        stmt.bindLong(15, entity.getOpenMin3());
        stmt.bindLong(16, entity.getCloseHour3());
        stmt.bindLong(17, entity.getCloseMin3());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TimerTask entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(2, macAddress);
        }
        stmt.bindLong(3, entity.getBussMode());
        stmt.bindLong(4, entity.getFunCode());
        stmt.bindLong(5, entity.getWeek());
        stmt.bindLong(6, entity.getOpenHour());
        stmt.bindLong(7, entity.getOpenMin());
        stmt.bindLong(8, entity.getCloseHour());
        stmt.bindLong(9, entity.getCloseMin());
        stmt.bindLong(10, entity.getOpenHour2());
        stmt.bindLong(11, entity.getOpenMin2());
        stmt.bindLong(12, entity.getCloseHour2());
        stmt.bindLong(13, entity.getCloseMin2());
        stmt.bindLong(14, entity.getOpenHour3());
        stmt.bindLong(15, entity.getOpenMin3());
        stmt.bindLong(16, entity.getCloseHour3());
        stmt.bindLong(17, entity.getCloseMin3());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TimerTask readEntity(Cursor cursor, int offset) {
        TimerTask entity = new TimerTask( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // macAddress
            cursor.getInt(offset + 2), // bussMode
            cursor.getInt(offset + 3), // funCode
            cursor.getInt(offset + 4), // week
            cursor.getInt(offset + 5), // openHour
            cursor.getInt(offset + 6), // openMin
            cursor.getInt(offset + 7), // closeHour
            cursor.getInt(offset + 8), // closeMin
            cursor.getInt(offset + 9), // openHour2
            cursor.getInt(offset + 10), // openMin2
            cursor.getInt(offset + 11), // closeHour2
            cursor.getInt(offset + 12), // closeMin2
            cursor.getInt(offset + 13), // openHour3
            cursor.getInt(offset + 14), // openMin3
            cursor.getInt(offset + 15), // closeHour3
            cursor.getInt(offset + 16) // closeMin3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TimerTask entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMacAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBussMode(cursor.getInt(offset + 2));
        entity.setFunCode(cursor.getInt(offset + 3));
        entity.setWeek(cursor.getInt(offset + 4));
        entity.setOpenHour(cursor.getInt(offset + 5));
        entity.setOpenMin(cursor.getInt(offset + 6));
        entity.setCloseHour(cursor.getInt(offset + 7));
        entity.setCloseMin(cursor.getInt(offset + 8));
        entity.setOpenHour2(cursor.getInt(offset + 9));
        entity.setOpenMin2(cursor.getInt(offset + 10));
        entity.setCloseHour2(cursor.getInt(offset + 11));
        entity.setCloseMin2(cursor.getInt(offset + 12));
        entity.setOpenHour3(cursor.getInt(offset + 13));
        entity.setOpenMin3(cursor.getInt(offset + 14));
        entity.setCloseHour3(cursor.getInt(offset + 15));
        entity.setCloseMin3(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TimerTask entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TimerTask entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TimerTask entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
